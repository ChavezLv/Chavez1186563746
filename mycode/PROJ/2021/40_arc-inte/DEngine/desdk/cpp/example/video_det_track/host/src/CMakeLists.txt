
cmake_minimum_required(VERSION 2.8.12)
project(media_service)
message("=========current desdk inc dir [ ${DESDK_INC_DIR} ]=============")
SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR})
#设置头文件
include_directories(${DESDK_INC_DIR})
include_directories(${DESDK_INC_DIR}/node)
include_directories(${DESDK_INC_DIR}/core)
include_directories(${DESDK_INC_DIR}/hal)
include_directories(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_decoder)
include_directories(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_mixer)
include_directories(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_encoder)
include_directories(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_encoder/rtsp_server)
include_directories(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_encoder/x264_encoder)
include_directories(${CMAKE_CURRENT_LIST_DIR}/media_service/src/session)
include_directories(${CMAKE_CURRENT_LIST_DIR}/media_service/src)
include_directories(${CMAKE_CURRENT_LIST_DIR}/app)
include_directories(${CMAKE_CURRENT_LIST_DIR}/media_service/src/display)
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${3RD_DIR}/dehik/include)

# aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/media_service/src                SOURCE)
aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_decoder  SOURCE)
# aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_mixer    SOURCE)
# aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_encoder  SOURCE)
# aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/media_service/src/session        SOURCE)
# aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_encoder/rtsp_server   SOURCE)
# aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/media_service/src/video_encoder/x264_encoder  SOURCE)
# aux_source_directory(${CMAKE_SOURCE_DIR}/include                SOURCE)
aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/media_service/src/display        SOURCE2)
aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/app                SOURCE)
#display服务程序
add_executable(display ${SOURCE2})
#media服务程序
add_executable(${PROJECT_NAME} ${SOURCE})
add_definitions(-DHOST_ENABLE=1)
add_definitions(-DUSE_PRIORITY_QUEUE=0)
add_definitions(-DP2P_SEND_RESULT=1)
add_definitions(-DUSE_FFMPEG_DECODER)
#设置第三方库目录，如果空间有限，可选用静态库版本
LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/bin/libifws.so)
LIST(APPEND LIB ${PLAT_DIR}/lib/libdesdk.so)
LIST(APPEND LIB ${PLAT_DIR}/lib/libusb.so)
LIST(APPEND LIB ${PLAT_DIR}/lib/libdesdkmm.so)
link_directories(/usr/local/lib/gst)
# LIST(APPEND LIB ${3RD_DIR}/opencv/lib/${TARGET_OS}/${TARGET_CPU}/libopencv_video.a)
# LIST(APPEND LIB ${3RD_DIR}/opencv/lib/${TARGET_OS}/${TARGET_CPU}/libopencv_videoio.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libopencv_highgui.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libopencv_imgcodecs.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libopencv_imgproc.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libopencv_core.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/liblibwebp.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/liblibtiff.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/liblibjasper.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/liblibpng.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/liblibjpeg.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libIlmImf.a)
LIST(APPEND LIB ${3RD_DIR}/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libzlib.a)

# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/opencv/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libippicv.a)

# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/boost/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libboost_filesystem.a)
# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/boost/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libboost_system.a)
# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/boost/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libboost_thread.a)

# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/live555/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libliveMedia.a)
# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/live555/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libgroupsock.a)
# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/live555/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libBasicUsageEnvironment.a)
# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/live555/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libUsageEnvironment.a)

# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/x264/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libx264.so.148)
# LIST(APPEND LIB ${CMAKE_SOURCE_DIR}/3rdparty/protobuf/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libprotobuf.a)

LIST(APPEND LIB ${3RD_DIR}/ffmpeg/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libavformat.a)
LIST(APPEND LIB ${3RD_DIR}/ffmpeg/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libavdevice.a)
LIST(APPEND LIB ${3RD_DIR}/ffmpeg/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libavcodec.a)
LIST(APPEND LIB ${3RD_DIR}/ffmpeg/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libavutil.a)
LIST(APPEND LIB ${3RD_DIR}/ffmpeg/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libswresample.a)
LIST(APPEND LIB ${3RD_DIR}/ffmpeg/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libavfilter.a)
LIST(APPEND LIB ${3RD_DIR}/ffmpeg/lib/$ENV{TARGET_OS}/$ENV{TARGET_CPU}/libswscale.a)


# if($ENV{TARGET_CPU} MATCHES x64) -llzma
LIST(APPEND LIB -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfontconfig -lgobject-2.0 -lglib-2.0 -lfreetype -lz -llzma)
#LIST(APPEND LIB -lX11)
#LIST(APPEND LIB -lva-dev -lva-drm1 -lva-egl1 -lva-glx1 -lva-tpi1 -lva-wayland1 -lva-x11-1 -lva1)
# LIST(APPEND LIB -lva -lva-drm -lva-x11)
# endif()

LIST(APPEND LIB dl pthread)

message(STATUS ${PROJECT_NAME})
message(STATUS ${LIB})
target_link_libraries(${PROJECT_NAME} -Wl,--start-group -Wl,--no-as-needed ${LIB} -Wl,--as-needed  -Wl,--end-group)

INSTALL(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_SOURCE_DIR}/bin)

target_link_libraries(display -Wl,--start-group ${LIB} -Wl,--end-group)
INSTALL(TARGETS display RUNTIME DESTINATION ${CMAKE_SOURCE_DIR}/bin)
