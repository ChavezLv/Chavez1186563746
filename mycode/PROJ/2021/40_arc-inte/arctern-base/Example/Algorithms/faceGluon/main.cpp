/****************************************************************************
 *  Copyright:      Copyright Â© 2020 intellifusion Inc. All rights Reserved
 *  Description:
 *  author:         chengaohua
 *  Last modified:  2020.08.21
 *  email:          chen.gaohua@intellif.com
 ****************************************************************************/

#include "src/Algorithms/faceGluon/faceGluon.h"
#include "opencv2/opencv.hpp"
#include <cassert>
#include "src/Algorithms/memoryDB/memoryDB.h"
int main(int args,char ** argv){
  arctern::FaceGluon face_gluon;

  arctern::InitParameter initParam;
  initParam.batchNum_ = 1;
  initParam.model_path = "/data/leizhiming/modelbin";

  auto ret = face_gluon.Init(&initParam);
  assert(ret == arctern::ErrorType::ERR_SUCCESS);

  cv::Mat image = cv::imread("/data/leizhiming/arctern-metadata/ModelsVerifyData/data/get_face_feat/1_2.png");

  ::arctern::ArcternImage img;
  img.width = image.cols;
  img.height = image.rows;
  img.imgdata.gdata = image.data;
  img.format = arctern::ARCTERN_IMAGE_FORMAT_BGR888;
  img.step = image.step;
  arctern::FaceGluonRunParameter runParameter;
  runParameter.imageV_.push_back(img);
  /// face rect
  runParameter.rectsV_.push_back({266, 603, 517, 517});

  arctern::FaceGluonResult result;
  ret = face_gluon.Process(&runParameter,&result);

  if (ret == arctern::ErrorType::ERR_SUCCESS) {
    assert(result.features_.size() == 1);
    std::cout << result.features_[0].size() << std::endl;
    for(auto & feat:result.features_[0]){
      std::cout <<(int) feat<<" ";
    }
    std::cout <<std::endl;
  }

  std::array<int,2064> arcternArray{177,60,189,103,131,106,213,26,113,188,116,51,129,189,204,36,195,61,61,214,34,141,149,45,100,189,134,157,41,188,210,99,0,8,7,13,14,11,4,9,3,6,12,1,4,60,189,109,135,66,85,157,58,189,117,185,239,60,82,22,5,61,187,172,175,163,234,216,192,61,212,242,94,60,93,252,163,190,187,82,203,195,169,209,214,188,178,152,20,188,15,97,144,189,61,182,10,89,163,165,134,61,211,21,176,189,233,92,146,61,60,33,158,60,44,108,171,188,55,42,38,187,200,255,22,59,60,210,210,177,117,245,104,58,187,171,195,187,101,151,97,186,61,64,36,147,148,60,47,189,21,36,115,60,142,188,168,60,61,5,37,38,40,127,163,61,90,196,160,61,60,140,84,60,188,109,168,140,186,171,193,189,107,108,159,186,242,12,141,187,187,94,132,180,253,133,200,61,131,124,147,60,193,94,29,189,188,35,62,20,3,23,104,189,220,167,38,187,103,13,156,186,60,75,8,252,130,126,80,61,32,39,214,61,93,161,34,188,189,46,180,132,162,88,252,188,211,186,144,60,73,64,182,61,188,213,28,131,201,161,82,60,36,6,29,188,104,6,239,61,61,8,255,140,209,181,14,58,157,63,21,60,168,131,65,60,189,100,127,24,187,111,166,61,92,172,30,189,16,28,180,188,188,55,112,139,99,122,95,189,23,115,125,188,232,100,198,188,189,144,217,56,229,4,21,188,45,136,136,189,254,33,67,189,189,215,191,194,45,145,1,60,176,175,37,189,17,10,154,59,62,221,5,13,35,109,35,61,235,132,138,61,230,3,2,61,60,201,1,77,52,46,24,188,159,169,15,60,28,103,116,189,61,72,132,119,141,131,175,189,58,187,80,61,79,78,123,61,60,38,42,172,249,156,71,189,141,120,150,60,0,32,93,59,189,113,53,92,168,164,3,189,246,147,189,188,113,15,23,189,189,53,60,43,168,111,85,61,153,221,92,61,189,107,157,189,188,211,67,150,90,195,119,189,185,5,56,188,217,242,111,60,188,124,245,225,112,129,53,59,63,100,162,61,229,173,148,189,59,218,70,208,240,99,196,189,252,181,129,60,164,8,207,60,60,27,2,218,22,50,71,60,108,199,229,189,11,202,6,187,189,16,193,244,139,157,142,59,209,172,250,189,203,9,108,60,60,52,63,155,237,55,210,61,13,227,245,61,152,224,84,188,60,28,179,143,98,248,247,59,126,192,16,188,33,78,182,61,60,101,184,238,179,95,44,61,27,138,25,189,135,146,114,61,61,124,188,205,25,47,86,188,134,189,249,189,71,96,0,61,188,53,159,89,140,15,179,59,141,76,155,189,177,105,135,189,189,5,44,5,33,18,1,187,82,126,15,189,121,123,137,188,189,208,254,106,13,239,213,60,18,231,167,59,111,175,242,58,61,237,45,37,42,234,112,187,18,62,158,188,145,110,250,61,189,179,165,165,47,132,217,189,150,109,35,189,2,104,109,61,60,163,250,218,118,238,106,60,215,86,131,188,244,34,240,60,60,64,137,153,68,173,65,60,203,73,194,60,170,213,108,187,60,14,152,130,37,54,57,189,10,228,248,61,226,244,86,61,61,60,66,167,193,77,181,59,148,144,54,61,181,122,199,189,61,65,93,11,23,234,242,60,21,50,187,61,129,180,120,60,188,86,90,154,112,38,31,60,161,38,195,60,118,86,141,189,188,21,74,154,120,175,73,188,28,102,132,60,33,85,117,61,61,201,50,138,223,7,192,61,58,8,127,60,41,165,255,61,189,96,92,50,45,132,243,61,52,74,177,187,244,71,117,61,186,38,170,252,114,4,160,59,100,41,31,61,165,169,217,59,61,152,8,17,199,7,127,61,79,79,135,189,245,19,33,61,188,86,225,201,90,17,172,60,160,18,29,189,26,87,230,60,60,146,177,229,40,171,29,60,150,222,2,61,156,174,156,188,188,89,52,230,16,80,24,188,105,199,37,61,46,137,115,186,188,214,204,132,111,78,82,188,216,15,40,189,130,57,155,187,189,175,13,110,151,39,250,61,54,79,151,189,250,0,31,59,61,178,159,158,242,3,233,61,241,65,186,60,245,41,2,188,60,128,162,154,186,171,181,61,207,178,96,60,1,187,253,189,189,185,188,89,1,10,14,189,11,154,7,187,255,203,224,60,189,223,124,87,79,112,3,60,66,31,169,61,200,173,59,61,188,198,173,102,252,53,133,60,13,92,122,189,179,214,92,60,59,60,143,168,55,147,231,60,204,250,38,58,177,24,42,59,60,188,139,245,144,18,198,189,42,144,247,189,72,74,168,189,189,105,175,61,162,219,9,188,200,162,120,188,215,170,189,188,188,3,176,239,17,177,61,189,142,18,28,189,147,22,222,189,60,94,132,68,187,160,48,60,110,202,101,61,15,219,68,60,60,176,38,118,111,25,119,60,137,236,195,61,67,151,1,61,189,81,163,42,67,77,122,61,67,124,121,60,175,111,89,61,61,197,100,101,115,14,103,60,34,80,175,59,17,135,100,189,61,32,117,87,101,162,219,61,56,53,57,60,24,41,68,60,188,176,114,239,134,158,146,58,65,131,111,56,17,174,94,61,189,85,147,34,51,167,169,189,243,61,101,188,124,64,85,61,59,215,87,158,191,190,110,61,35,48,19,188,140,25,139,189,61,75,198,200,47,185,102,61,119,123,193,59,76,250,135,60,189,95,88,210,135,144,241,60,149,215,246,61,203,23,204,188,187,214,155,239,22,139,96,187,43,193,239,189,216,242,2,187,187,148,134,228,164,94,47,61,155,147,26,61,202,8,221,189,60,84,207,217,69,51,156,188,225,93,121,61,225,249,219,61,61,128,5,226,137,45,33,61,48,224,83,59,43,97,63,188,59,83,117,189,130,157,196,189,209,55,228,188,236,172,180,188,59,68,225,133,237,15,156,188,54,46,37,189,98,245,7,61,61,162,37,23,222,191,221,60,37,17,145,189,53,196,242,188,61,242,137,29,126,2,183,189,66,207,145,61,175,126,95,189,60,253,238,123,165,56,164,60,211,52,70,189,41,227,233,59,188,225,34,188,55,188,35,189,221,243,145,60,63,150,154,188,61,54,32,192,137,165,36,61,144,43,138,189,169,47,28,59,57,31,216,47,55,196,154,60,74,188,209,59,153,220,100,61,189,34,203,9,223,40,241,187,49,4,130,59,3,194,104,189,189,162,21,56,121,85,230,188,140,141,104,188,28,26,3,60,61,230,194,15,77,218,91,189,99,200,180,60,56,25,168,61,186,223,135,198,59,185,132,61,51,134,83,60,97,121,239,61,188,240,156,25,79,67,78,60,73,122,81,189,198,141,46,61,60,15,103,126,190,134,83,188,178,126,48,189,121,108,101,60,189,192,192,172,182,52,34,189,176,43,185,60,54,101,54,189,187,147,41,2,94,6,46,189,97,151,139,189,224,75,91,188,186,16,83,10,5,24,180,60,51,210,63,61,255,102,119,189,60,223,141,133,196,99,64,61,188,185,60,188,211,214,3,188,189,91,231,38,177,168,154,188,153,211,170,61,251,83,24,189,60,221,67,205,132,16,72,61,139,197,127,61,74,10,24,59,189,230,46,121,147,185,184,188,50,152,155,61,126,85,12,188,189,194,153,22,72,85,189,60,198,180,184,60,178,248,171,189,187,36,115,233,253,109,243,188,45,33,156,61,143,42,216,188,60,40,172,216,115,101,203,189,182,173,110,61,71,139,127,188,189,96,105,146,27,5,252,59,8,146,190,189,141,84,216,61,188,90,222,220,83,24,146,61,24,44,2,189,154,116,61,188,187,225,141,120,40,193,90,189,111,173,7,60,181,241,88,60,61,212,125,3,36,51,149,60,49,84,62,189,66,225,21,189,188,159,6,126,64,127,162,189,175,28,91,187,222,92,172,61,188,2,10,60,87,255,188,61,42,52,96,187,99,48,201,188,61,103,22,71,223,74,140,189,247,40,0,188,186,106,129,189,188,219,206,228,86,86,199,61,7,180,61,188,48,168,198,189,185,41,119,49,31,47,247,189,237,45,14,188,87,204,54,61,60,253,104,111,46,133,129,187,211,166,102,61,23,189,221,188,61,7,2,71,207,197,132,61,242,237,6,61,220,88,197,61,60,219,55,245,214,146,119,189,216,154,9,188,219,9,174,189,188,158,140,165,165,235,15,61,101,1,42,60,43,13,56,189,59,104,0,29,112,170,70,189,239,169,36,59,169,117,110,61,188,113,218,244,109,86,197,189,73,29,4,61,134,4,193,61,60,25,241,135,205,202,200,60,178,137,147,188,158,166,174,60,188,177,45,73,166,134,174,186,89,25,164,188,6,163,1,60,60,8,24,82,204,5,164,188,73,251,200,189,68,162,179,61,60,252,168,168,24,18,185,59,24,249,87,60,31,226,57,189,188,78,84,11,219,30,214,188,95,37,24,189,72,207,54,189,189,23,207,44,111,191,228,188,100,91,18,59,188,249,30,61,60,202,116,192,74,165,187,188,12,169,24,60,181,89,224,189,188,94,4,162,221,218,98,188,25,219,163,188,113,196,158,187,60,84,129,41,35,27,251,188,23,194,75,189,78,197,15,10,5,2
  };
  std::vector<uint8> vArcternFeats(2064);
  for(int i=0;i<2064;i++){
    vArcternFeats[i] =(uint8) arcternArray[i];
  }
  //memcpy(vArcternFeats.data(),arcternArray.data(),2064);
  auto sim = arctern::compute_similarity(result.features_[0],vArcternFeats);
  std::cout <<"sim="<<sim<<std::endl;
  return 0;
}
